name: Build and Release

on:
  push:
    branches:
      - fix-ci
      - dev
      - master
    paths:
      - '**.py'
      - '**.yml'
      - '**.yaml'
      - 'pyproject.toml'
      - 'pdm.lock'

permissions:
  contents: write  # 用于上传 Release 资源
  actions: write   # 用于创建 Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]  # 只针对 macOS 和 Windows 构建
        python-version: [3.11]
        include:
          - os: macos-latest
            spec: GameYamlSpider.spec
          - os: windows-latest
            spec: GameYamlSpider.spec

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}

      - name: Install PDM
        run: pip install pdm

      - name: Install Dependencies
        run: |
          pdm install
          pdm run pip install pyinstaller

      - name: Build Binary with PyInstaller
        run: |
          pdm run pyinstaller GameYamlSpider.spec --clean --onefile
        env:
          PATH: ${{ github.workspace }}/.pdm/bin:${{ env.PATH }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Get Version from pyproject.toml
        id: version
        run: |
          version=$(grep -Po '(?<=version = ")[^"]+' pyproject.toml)
          echo "version=$version" >> $GITHUB_ENV

      - name: Check if Version is Pre-release
        id: prerelease-check
        run: |
          # 检查版本号是否包含预发布标识（例如 a, b, rc）
          if [[ "${{ env.version }}" =~ a|b|rc ]]; then
            echo "prerelease=true" >> $GITHUB_ENV
          else
            echo "prerelease=false" >> $GITHUB_ENV

      - name: Check Previous Release
        id: release-check
        uses: actions/github-script@v9
        with:
          script: |
            const releases = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const exists = releases.data.some(r => r.tag_name === `v${process.env.version}`);
            core.setOutput('exists', exists);

      - name: Create Release
        if: steps.release-check.outputs.exists != 'true'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.version }}
          release_name: Release v${{ env.version }}
          draft: false
          prerelease: ${{ env.prerelease }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v3
        with:
          repo: ${{ github.repository }}
          release_id: ${{ steps.create-release.outputs.id }}
          asset_path: dist/
          asset_name: ${{ matrix.os }}-binary-${{ env.version }}
          asset_content_type: application/octet-stream
